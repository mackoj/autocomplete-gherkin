[
  {
    "keyword": "Feature",
    "name": "yield matchers",
    "line": 1,
    "description": "\nThere are four related matchers that allow you to specify whether\nor not a method yields, how many times it yields, whether or not\nit yields with arguments, and what those arguments are.\n\n  * `yield_control` matches if the method-under-test yields, regardless\n    of whether or not arguments are yielded.\n  * `yield_with_args` matches if the method-under-test yields with\n    arguments. If arguments are provided to this matcher, it will\n    only pass if the actual yielded arguments match the expected ones\n    using `===` or `==`.\n  * `yield_with_no_args` matches if the method-under-test yields with\n    no arguments.\n  * `yield_successive_args` is designed for iterators, and will match\n    if the method-under-test yields the same number of times as arguments\n    passed to this matcher, and all actual yielded arguments match the\n    expected ones using `===` or `==`.\n\nNote: your expect block _must_ accept an argument that is then passed on to\nthe method-under-test as a block. This acts as a \"probe\" that allows the matcher\nto detect whether or not your method yields, and, if so, how many times and what\nthe yielded arguments are.",
    "id": "yield-matchers",
    "uri": "features/yield.feature",
    "elements": [
      {
        "keyword": "Background",
        "name": "",
        "line": 25,
        "description": "",
        "type": "background",
        "steps": [
          {
            "keyword": "Given ",
            "name": "a file named \"my_class.rb\" with:",
            "line": 26,
            "doc_string": {
              "value": "class MyClass\n  def self.yield_once_with(*args)\n    yield *args\n  end\n\n  def self.yield_twice_with(*args)\n    2.times { yield *args }\n  end\n\n  def self.raw_yield\n    yield\n  end\n\n  def self.dont_yield\n  end\nend",
              "content_type": "ruby",
              "line": 27
            },
            "match": {
              "location": "features/yield.feature:26"
            },
            "result": {
              "status": "undefined"
            }
          }
        ]
      },
      {
        "keyword": "Scenario",
        "name": "yield_control matcher",
        "line": 46,
        "description": "",
        "id": "yield-matchers;yield-control-matcher",
        "type": "scenario",
        "steps": [
          {
            "keyword": "Given ",
            "name": "a file named \"yield_control_spec.rb\" with:",
            "line": 47,
            "doc_string": {
              "value": "require './my_class'\n\ndescribe \"yield_control matcher\" do\n  specify { expect { |b| MyClass.yield_once_with(1, &b) }.to yield_control }\n  specify { expect { |b| MyClass.dont_yield(&b) }.not_to yield_control }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.to yield_control.twice }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.to yield_control.exactly(2).times }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.to yield_control.at_least(1) }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.to yield_control.at_most(3).times }\n\n  # deliberate failures\n  specify { expect { |b| MyClass.yield_once_with(1, &b) }.not_to yield_control }\n  specify { expect { |b| MyClass.dont_yield(&b) }.to yield_control }\n  specify { expect { |b| MyClass.yield_once_with(1, &b) }.to yield_control.at_least(2).times }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.not_to yield_control.twice }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.not_to yield_control.at_least(2).times }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.not_to yield_control.at_least(1) }\n  specify { expect { |b| MyClass.yield_twice_with(1, &b) }.not_to yield_control.at_most(3).times }\nend",
              "content_type": "ruby",
              "line": 48
            },
            "match": {
              "location": "features/yield.feature:47"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "When ",
            "name": "I run `rspec yield_control_spec.rb`",
            "line": 69,
            "match": {
              "location": "features/yield.feature:69"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "Then ",
            "name": "the output should contain all of these:",
            "line": 70,
            "rows": [
              {
                "cells": [
                  "13 examples, 7 failures"
                ],
                "line": 71
              },
              {
                "cells": [
                  "expected given block to yield control"
                ],
                "line": 72
              },
              {
                "cells": [
                  "expected given block not to yield control"
                ],
                "line": 73
              },
              {
                "cells": [
                  "expected given block not to yield control at least twice"
                ],
                "line": 74
              },
              {
                "cells": [
                  "expected given block not to yield control at most 3 times"
                ],
                "line": 75
              }
            ],
            "match": {
              "location": "features/yield.feature:70"
            },
            "result": {
              "status": "undefined"
            }
          }
        ]
      },
      {
        "keyword": "Scenario",
        "name": "yield_with_args matcher",
        "line": 77,
        "description": "",
        "id": "yield-matchers;yield-with-args-matcher",
        "type": "scenario",
        "steps": [
          {
            "keyword": "Given ",
            "name": "a file named \"yield_with_args_spec.rb\" with:",
            "line": 78,
            "doc_string": {
              "value": "require './my_class'\n\ndescribe \"yield_with_args matcher\" do\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.to yield_with_args }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.to yield_with_args(\"foo\") }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.to yield_with_args(String) }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.to yield_with_args(/oo/) }\n\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", \"bar\", &b) }.to yield_with_args(\"foo\", \"bar\") }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", \"bar\", &b) }.to yield_with_args(String, String) }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", \"bar\", &b) }.to yield_with_args(/fo/, /ar/) }\n\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", \"bar\", &b) }.not_to yield_with_args(17, \"baz\") }\n\n  # deliberate failures\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.not_to yield_with_args }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.not_to yield_with_args(\"foo\") }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.not_to yield_with_args(String) }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", &b) }.not_to yield_with_args(/oo/) }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", \"bar\", &b) }.not_to yield_with_args(\"foo\", \"bar\") }\n  specify { expect { |b| MyClass.yield_once_with(\"foo\", \"bar\", &b) }.to yield_with_args(17, \"baz\") }\nend",
              "content_type": "ruby",
              "line": 79
            },
            "match": {
              "location": "features/yield.feature:78"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "When ",
            "name": "I run `rspec yield_with_args_spec.rb`",
            "line": 103,
            "match": {
              "location": "features/yield.feature:103"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "Then ",
            "name": "the output should contain all of these:",
            "line": 104,
            "rows": [
              {
                "cells": [
                  "14 examples, 6 failures"
                ],
                "line": 105
              },
              {
                "cells": [
                  "expected given block not to yield with arguments, but did"
                ],
                "line": 106
              },
              {
                "cells": [
                  "expected given block not to yield with arguments, but yielded with expected arguments"
                ],
                "line": 107
              },
              {
                "cells": [
                  "expected given block to yield with arguments, but yielded with unexpected arguments"
                ],
                "line": 108
              }
            ],
            "match": {
              "location": "features/yield.feature:104"
            },
            "result": {
              "status": "undefined"
            }
          }
        ]
      },
      {
        "keyword": "Scenario",
        "name": "yield_with_no_args matcher",
        "line": 110,
        "description": "",
        "id": "yield-matchers;yield-with-no-args-matcher",
        "type": "scenario",
        "steps": [
          {
            "keyword": "Given ",
            "name": "a file named \"yield_with_no_args_spec.rb\" with:",
            "line": 111,
            "doc_string": {
              "value": "require './my_class'\n\ndescribe \"yield_with_no_args matcher\" do\n  specify { expect { |b| MyClass.raw_yield(&b) }.to yield_with_no_args }\n  specify { expect { |b| MyClass.dont_yield(&b) }.not_to yield_with_no_args }\n  specify { expect { |b| MyClass.yield_once_with(\"a\", &b) }.not_to yield_with_no_args }\n\n  # deliberate failures\n  specify { expect { |b| MyClass.raw_yield(&b) }.not_to yield_with_no_args }\n  specify { expect { |b| MyClass.dont_yield(&b) }.to yield_with_no_args }\n  specify { expect { |b| MyClass.yield_once_with(\"a\", &b) }.to yield_with_no_args }\nend",
              "content_type": "ruby",
              "line": 112
            },
            "match": {
              "location": "features/yield.feature:111"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "When ",
            "name": "I run `rspec yield_with_no_args_spec.rb`",
            "line": 126,
            "match": {
              "location": "features/yield.feature:126"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "Then ",
            "name": "the output should contain all of these:",
            "line": 127,
            "rows": [
              {
                "cells": [
                  "6 examples, 3 failures"
                ],
                "line": 128
              },
              {
                "cells": [
                  "expected given block not to yield with no arguments, but did"
                ],
                "line": 129
              },
              {
                "cells": [
                  "expected given block to yield with no arguments, but did not yield"
                ],
                "line": 130
              },
              {
                "cells": [
                  "expected given block to yield with no arguments, but yielded with arguments: [\"a\"]"
                ],
                "line": 131
              }
            ],
            "match": {
              "location": "features/yield.feature:127"
            },
            "result": {
              "status": "undefined"
            }
          }
        ]
      },
      {
        "keyword": "Scenario",
        "name": "yield_successive_args matcher",
        "line": 133,
        "description": "",
        "id": "yield-matchers;yield-successive-args-matcher",
        "type": "scenario",
        "steps": [
          {
            "keyword": "Given ",
            "name": "a file named \"yield_successive_args_spec.rb\" with:",
            "line": 134,
            "doc_string": {
              "value": "def array\n  [1, 2, 3]\nend\n\ndef array_of_tuples\n  [[:a, :b], [:c, :d]]\nend\n\ndescribe \"yield_successive_args matcher\" do\n  specify { expect { |b| array.each(&b) }.to yield_successive_args(1, 2, 3) }\n  specify { expect { |b| array_of_tuples.each(&b) }.to yield_successive_args([:a, :b], [:c, :d]) }\n  specify { expect { |b| array.each(&b) }.to yield_successive_args(Fixnum, Fixnum, Fixnum) }\n  specify { expect { |b| array.each(&b) }.not_to yield_successive_args(1, 2) }\n\n  # deliberate failures\n  specify { expect { |b| array.each(&b) }.not_to yield_successive_args(1, 2, 3) }\n  specify { expect { |b| array_of_tuples.each(&b) }.not_to yield_successive_args([:a, :b], [:c, :d]) }\n  specify { expect { |b| array.each(&b) }.not_to yield_successive_args(Fixnum, Fixnum, Fixnum) }\n  specify { expect { |b| array.each(&b) }.to yield_successive_args(1, 2) }\nend",
              "content_type": "ruby",
              "line": 135
            },
            "match": {
              "location": "features/yield.feature:134"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "When ",
            "name": "I run `rspec yield_successive_args_spec.rb`",
            "line": 157,
            "match": {
              "location": "features/yield.feature:157"
            },
            "result": {
              "status": "undefined"
            }
          },
          {
            "keyword": "Then ",
            "name": "the output should contain all of these:",
            "line": 158,
            "rows": [
              {
                "cells": [
                  "8 examples, 4 failures"
                ],
                "line": 159
              },
              {
                "cells": [
                  "expected given block not to yield successively with arguments, but yielded with expected arguments"
                ],
                "line": 160
              },
              {
                "cells": [
                  "expected given block to yield successively with arguments, but yielded with unexpected arguments"
                ],
                "line": 161
              }
            ],
            "match": {
              "location": "features/yield.feature:158"
            },
            "result": {
              "status": "undefined"
            }
          }
        ]
      }
    ]
  }
]